Feature	sequences.html#Feature	sequences: Feature	
scSequence	sequences.html#scSequence	SequenceClass.scSequence	
scDna	sequences.html#scDna	SequenceClass.scDna	
scRna	sequences.html#scRna	SequenceClass.scRna	
scProtein	sequences.html#scProtein	SequenceClass.scProtein	
SequenceClass	sequences.html#SequenceClass	sequences: SequenceClass	
Sequence	sequences.html#Sequence	sequences: Sequence	
SequenceRecord	sequences.html#SequenceRecord	sequences: SequenceRecord	
SequenceClassError	sequences.html#SequenceClassError	sequences: SequenceClassError	
newDna	sequences.html#newDna,string	sequences: newDna(chain: string): Sequence	
newRna	sequences.html#newRna,string	sequences: newRna(chain: string): Sequence	
newProtein	sequences.html#newProtein,string	sequences: newProtein(chain: string): Sequence	
`$`	sequences.html#$,Sequence	sequences: `$`(s: Sequence): string	
`$`	sequences.html#$,SequenceRecord	sequences: `$`(sr: SequenceRecord): string	
`$`	sequences.html#$,BackwardsIndex	sequences: `$`(bi: BackwardsIndex): string	
`?=`	sequences.html#?=,Sequence,Sequence	sequences: `?=`(a, b: Sequence): bool	
`[]`	sequences.html#[],Sequence,	sequences: `[]`(s: Sequence; i: int | BackwardsIndex): char	
`[]`	sequences.html#[],Sequence,HSlice	sequences: `[]`(s: Sequence; hs: HSlice): Sequence	
`[]`	sequences.html#[],SequenceRecord,	sequences: `[]`(sr: SequenceRecord; i: int | BackwardsIndex): char	
`[]`	sequences.html#[],SequenceRecord,HSlice	sequences: `[]`(sr: SequenceRecord; s: HSlice): SequenceRecord	
`[]=`	sequences.html#[]=,Sequence,,char	sequences: `[]=`(s: Sequence; i: int | BackwardsIndex; val: char)	
`[]=`	sequences.html#[]=,SequenceRecord,,char	sequences: `[]=`(sr: SequenceRecord; i: int | BackwardsIndex; val: char)	
`[]=`	sequences.html#[]=,Sequence,HSlice[T,U],string	sequences: `[]=`[T, U](s: Sequence; x: HSlice[T, U]; b: string)	
`[]=`	sequences.html#[]=,SequenceRecord,HSlice[T,U],string	sequences: `[]=`[T, U](s: SequenceRecord; x: HSlice[T, U]; b: string)	
items	sequences.html#items.i,Sequence	sequences: items(s: Sequence): char	
items	sequences.html#items.i,SequenceRecord	sequences: items(sr: SequenceRecord): char	
pairs	sequences.html#pairs.i,Sequence	sequences: pairs(s: Sequence): tuple[a: int, b: char]	
pairs	sequences.html#pairs.i,SequenceRecord	sequences: pairs(sr: SequenceRecord): tuple[a: int, b: char]	
zip	sequences.html#zip,SequenceRecord,SequenceRecord	sequences: zip(sr1, sr2: SequenceRecord): seq[(char, char)]	
len	sequences.html#len,Sequence	sequences: len(s: Sequence): int	
len	sequences.html#len,SequenceRecord	sequences: len(sr: SequenceRecord): int	
guess	sequences.html#guess,string	sequences: guess(s: string): Sequence	
complement	sequences.html#complement,Sequence	sequences: complement(s: Sequence): Sequence	
reverseComplement	sequences.html#reverseComplement,Sequence	sequences: reverseComplement(s: Sequence): Sequence	
transcript	sequences.html#transcript,Sequence	sequences: transcript(s: Sequence): Sequence	
backTranscript	sequences.html#backTranscript,Sequence	sequences: backTranscript(s: Sequence): Sequence	
translate	sequences.html#translate,Sequence	sequences: translate(s: Sequence): Sequence	
codon	sequences.html#codon,Sequence,int	sequences: codon(s: Sequence; position: int): Sequence	
gc	sequences.html#gc,Sequence	sequences: gc(s: Sequence): float	
gc3	sequences.html#gc3,Sequence	sequences: gc3(s: Sequence): float	
